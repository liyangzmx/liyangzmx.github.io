@startuml MediaCodec

hide footbox
skinparam {
    ' defaultFontName Abyssinica SIL
    Shadowing false
    backgroundColor white
    NoteFontColor #Black
    NoteFontSize 16
    NoteTextAlignment left
    NoteBackgroundColor WhiteSmoke
    NoteColor transparent
    NoteBorderThickness 0
    NoteBorderColor transparent
    NoteBorderThickness 0
    NoteShadowing false
    ParticipantPadding 0
    BoxPadding 20
    dpi 96
    ClassBackgroundColor transparent
    ClassHeaderBackgroundColor lightgreen
    ClassStereotypeFontColor transparent
    SequenceBoxBordercolor WhiteSmoke
    SequenceBoxFontSize 24
    SequenceBoxFontColor Black
    SequenceBoxBackgroundColor WhiteSmoke
    SequenceLifeLineBackgroundColor WhiteSmoke
    SequenceMessageAlignment center
    SequenceGroupHeaderFontColor White
    SequenceGroupHeaderFontSize 20
    SequenceGroupBackgroundColor DarkOliveGreen
    SequenceGroupBodyBackgroundColor transparent
    SequenceGroupBorderThickness 4
    SequenceGroupBorderColor DarkOliveGreen
    ' transparent
    sequence {
        ParticipantBackgroundColor WhiteSmoke
        ParticipantBorderColor Gray
        ParticipantFontStyle Bold
        ParticipantFontSize 12
        ParticipantPadding 0

        LifeLineBorderColor DimGray
        ArrowColor Black
        ArrowThickness 0.8
        ColorArrowSeparationSpace 30
    }
}

box NuPlayer
' participant GenericSource
' participant AudioOutput
participant NuPlayer
participant Renderer
participant Decoder
end box

box StageFright
box MediaCodec
participant MediaCodec
' participant BufferCallback
end box

box CCodec
participant CCodec
participant CCodecBufferChannel
' participant Codec2Client
end box
end box

' box HIDL
' participant ClientListener
' participant HidlListener
' end box

' box AAC Component #EFEFFF
box media.swcodec #EFEFFF
' participant InputBufferManager
' participant C2Buffer
' participant CachedConfigurable
participant Component
' participant "Component" as Component
participant "[SimpleC2Component]\nC2SoftAacDec" as C2SoftAacDec
' participant C2SoftAacDecFactory
end box

' participant _C2BlockPoolCache
' participant C2PlatformAllocatorStoreImpl
' participant C2ComponentStore
' participant C2PlatformComponentStore
' participant ComponentLoader
' participant ComponentModule
' end box


' box libAACdec
' participant libAACdec
' end box

->MediaCodec:getOutputBuffers()
activate MediaCodec
MediaCodec->MediaCodec:**kWhatGetBuffers**
activate MediaCodec
create CCodecBufferChannel
MediaCodec->CCodecBufferChannel:getOutputBufferArray()
deactivate MediaCodec
deactivate MediaCodec
' CCodecBufferChannel->FlexOutputBuffers:toArrayMode()
' FlexOutputBuffers->OutputBuffersArray:initialize()
' OutputBuffersArray->BuffersArrayImpl:initialize()
' BuffersArrayImpl-->DummyContainerBuffer:NEW


->NuPlayer:onStart()
activate NuPlayer
create Renderer
NuPlayer->Renderer:NEW
NuPlayer->NuPlayer:postScanSources()
activate NuPlayer
NuPlayer->NuPlayer:**kWhatScanSources**
activate NuPlayer
NuPlayer->NuPlayer:instantiateDecoder()
activate NuPlayer
create Decoder
NuPlayer->Decoder:DecoderBase::init()
NuPlayer->Decoder:DecoderBase::configure()
deactivate NuPlayer
deactivate NuPlayer
deactivate NuPlayer
deactivate NuPlayer
activate Decoder
Decoder->Decoder:**kWhatConfigure**
activate Decoder
Decoder->Decoder:onConfigure()
activate Decoder

Decoder->MediaCodec:CreateByType()
activate MediaCodec
MediaCodec->MediaCodec:init()
activate MediaCodec
MediaCodec->MediaCodec:**kWhatInit**
activate MediaCodec
create CCodec
MediaCodec->CCodec:CCodec::initiateAllocateComponent()
deactivate MediaCodec
deactivate MediaCodec
deactivate MediaCodec
activate CCodec
CCodec->CCodec:**kWhatAllocate**
activate CCodec
CCodec->CCodec:init()
activate CCodec
' create Codec2Client
' CCodec->Codec2Client:CreateComponentByName()

' activate Codec2Client
' Codec2Client->Codec2Client:createComponent()
' activate Codec2Client
' create C2ComponentStore
' Codec2Client->C2ComponentStore:createComponent_1_2()
' activate C2ComponentStore
' create C2PlatformComponentStore
' C2ComponentStore->C2PlatformComponentStore:createComponent()
' deactivate C2ComponentStore
' activate C2PlatformComponentStore
' C2PlatformComponentStore->C2PlatformComponentStore:findComponent()
' activate C2PlatformComponentStore
' create ComponentLoader
' C2PlatformComponentStore->ComponentLoader:fetchModule()
' deactivate C2PlatformComponentStore
' deactivate C2PlatformComponentStore
' create ComponentModule
' ComponentLoader->ComponentModule:init()
' ComponentModule->ComponentModule:createInterface()
' ComponentModule->C2SoftAacDecFactory:createInterface()
' create C2SoftAacDecFactory
' Codec2Client-->C2SoftAacDecFactory:createInterface()
' create C2SoftAacDec
' create C2SoftAacDec

' create Component
CCodec->CCodec:Codec2Client::CreateComponentByName()
activate CCodec
CCodec->CCodec:Codec2Client::createComponent()
activate CCodec
CCodec-->Component:NEW
note left:C2SoftAacDecFactory::createInterface()\n\
    C2ComponentStore::createComponent_1_2()\n\
        Component::Component()

CCodec-->C2SoftAacDec:IntfImpl::IntfImpl()
note left:C2SoftAacDecFactory::createInterface()\n\
    C2ComponentStore::createComponent_1_2()\n\
        C2PlatformComponentStore::createComponent()\n\
            C2PlatformComponentStore::findComponent()\n\
                ComponentLoader::fetchModule()\n\
                    ComponentModule::init()\n\
                        ComponentModule::createInterface()\n\
                            C2SoftAacDecFactory::createInterface()

CCodec-->Component:interfaceChain()
note left:Codec2Client::Component::Component()\n\
    IComponent::castFrom()\n\
        android::hardware::details::castInterface()\n\
            android::hardware::details::canCastInterface()\n\
                BpHwComponent::interfaceChain()

CCodec-->Component:linkToDeath()
note left:Component::setDeathListener()\n\
    Component::linkToDeath()
deactivate CCodec
deactivate CCodec
deactivate CCodec
deactivate CCodec
deactivate CCodec
' deactivate Codec2Client
' deactivate Codec2Client
' C2SoftAacDecFactory->C2SoftAacDec:IntfImpl::IntfImpl()


Decoder->MediaCodec:**kWhatStart**
deactivate Decoder
deactivate Decoder
deactivate Decoder
' group START
activate MediaCodec
MediaCodec->CCodec:initiateStart()
activate CCodec
CCodec->CCodec:kWhatStart
activate CCodec
CCodec->CCodec:start()
activate CCodec
' create CachedConfigurable
' CachedConfigurable->o Component:mInterface.mConfigurable
CCodec-->Component:start()
activate Component
Component->C2SoftAacDec:start()
deactivate Component
activate C2SoftAacDec
C2SoftAacDec->C2SoftAacDec:**kWhatInit**
activate C2SoftAacDec
C2SoftAacDec->C2SoftAacDec:initDecoder()
activate C2SoftAacDec
deactivate C2SoftAacDec
deactivate C2SoftAacDec
deactivate C2SoftAacDec
CCodec->CCodecBufferChannel:start()
activate CCodecBufferChannel
' end group
CCodecBufferChannel-->Component:getInterface()
Component-->CCodecBufferChannel:mInterfac->\n\tmConfigurable\n\t[CachedConfigurable]
CCodecBufferChannel-->Component:mInterfac->\n\tmConfigurable\n\t[CachedConfigurable]->\n\tquery()
CCodecBufferChannel-->Component:mInterfac->\n\tmConfigurable\n\t[CachedConfigurable]->\n\tconfig()
CCodecBufferChannel-->Component:setOutputSurface()

CCodecBufferChannel-->Component:createBlockPool()
deactivate CCodecBufferChannel
activate Component
Component-->Component:CreateCodec2BlockPool()
activate Component
' create _C2BlockPoolCache
' Component->_C2BlockPoolCache:createBlockPool()
Component-->Component:querySupportedValues()
activate Component
note left #EFEFFF:_C2BlockPoolCache:createBlockPool()\n\
    _C2BlockPoolCache:GetCodec2PlatformAllocatorStore()\n\
        C2PlatformAllocatorStoreImpl:setComponentStore()\n\
            C2PlatformAllocatorStoreImpl:UseComponentStoreForIonAllocator()\n\
                C2ComponentStore:querySupportedValues_sm()\n\
                    Component:querySupportedValues()
deactivate Component
deactivate Component
' Component-->CachedConfigurable:NEW
deactivate Component
' activate _C2BlockPoolCache
' _C2BlockPoolCache->_C2BlockPoolCache:GetCodec2PlatformAllocatorStore()
' activate _C2BlockPoolCache
' create C2PlatformAllocatorStoreImpl
' _C2BlockPoolCache->C2PlatformAllocatorStoreImpl:setComponentStore()
' deactivate _C2BlockPoolCache
' deactivate _C2BlockPoolCache
' activate C2PlatformAllocatorStoreImpl
' C2PlatformAllocatorStoreImpl->C2PlatformAllocatorStoreImpl:UseComponentStoreForIonAllocator()
' activate C2PlatformAllocatorStoreImpl
' C2PlatformAllocatorStoreImpl->C2ComponentStore:querySupportedValues_sm()
' deactivate C2PlatformAllocatorStoreImpl
' deactivate C2PlatformAllocatorStoreImpl
' activate C2ComponentStore
' C2ComponentStore-->Component:querySupportedValues()
' deactivate C2ComponentStore

' group requestInitialInputBuffers
CCodec->CCodecBufferChannel:requestInitialInputBuffers()
deactivate CCodec
deactivate CCodec
deactivate CCodec
activate CCodecBufferChannel
CCodecBufferChannel->CCodecBufferChannel:queueInputBufferInternal()
activate CCodecBufferChannel
CCodecBufferChannel-->Component:queue()
deactivate CCodecBufferChannel
deactivate CCodecBufferChannel
Component->C2SoftAacDec:**kWhatProcess**
activate C2SoftAacDec
C2SoftAacDec->C2SoftAacDec:processQueue()
activate C2SoftAacDec
' end group

' InputBufferManager<-InputBufferManager:main()
' activate InputBufferManager
' InputBufferManager->InputBufferManager:processNotifications()
' activate InputBufferManager
' note over InputBufferManager:**WATING NOTIFICATIOn**

' group CB_INPUT_AVAILABLE
' create C2Buffer
' C2SoftAacDec->C2Buffer::~Impl::~Impl
C2SoftAacDec->C2SoftAacDec:process()
activate C2SoftAacDec
' C2Buffer->InputBufferManager:_onBufferDestroyed()
' create HidlListener
' InputBufferManager-->HidlListener:onInputBuffersReleased()
' InputBufferManager-->CCodec:onInputBuffersReleased()
C2SoftAacDec-->CCodec:onInputBuffersReleased()
note left:C2Buffer::~Impl::~Impl()\n\
    HidlListener::onInputBuffersReleased()\n\
        ClientListener::onInputBufferDone()\n\
            Codec::onInputBufferDone()
' deactivate InputBufferManager
' deactivate InputBufferManager
' create ClientListener
' HidlListener->ClientListener:onInputBufferDone()
' ClientListener->CCodec:onInputBufferDone()
activate CCodec
CCodec->CCodecBufferChannel:onInputBufferDone()
deactivate CCodec
activate CCodecBufferChannel
CCodecBufferChannel->CCodecBufferChannel:feedInputBufferIfAvailable()
activate CCodecBufferChannel
CCodecBufferChannel->CCodecBufferChannel:feedInputBufferIfAvailableInternal()
activate CCodecBufferChannel
' CCodecBufferChannel->BufferCallback:onInputBufferAvailable()
CCodecBufferChannel->MediaCodec:**kWhatFillThisBuffer**
note left:BufferCallback::onInputBufferAvailable()\n\
MediaCodec:**kWhatFillThisBuffer**
deactivate CCodecBufferChannel
deactivate CCodecBufferChannel
deactivate CCodecBufferChannel
' BufferCallback->MediaCodec:**kWhatFillThisBuffer**
activate MediaCodec
MediaCodec->MediaCodec:onInputBufferAvailable()
activate MediaCodec
MediaCodec->MediaCodec:dequeuePortBuffer()
activate MediaCodec
MediaCodec->Decoder:**CB_INPUT_AVAILABLE**
deactivate MediaCodec
deactivate MediaCodec
deactivate MediaCodec
deactivate MediaCodec
activate Decoder
Decoder->Decoder:handleAnInputBuffer()
activate Decoder
Decoder->Decoder:onRequestInputBuffers()
note left:**DecoderBase**
activate Decoder
Decoder->Decoder:doRequestBuffers()
note left:**Decoder**
activate Decoder
Decoder->Decoder:Decoder::fetchInputData()
activate Decoder
' end group
<-Decoder:GenericSource::dequeueAccessUnit()
deactivate Decoder
Decoder->Decoder:onInputBufferFetched()
activate Decoder
Decoder->MediaCodec:**kWhatQueueInputBuffer**
deactivate Decoder
deactivate Decoder
deactivate Decoder
deactivate Decoder
deactivate Decoder
activate MediaCodec



->NuPlayer:seekTo\n\tAsync()
activate NuPlayer
NuPlayer->NuPlayer:**kWhatSeek**
activate NuPlayer
NuPlayer->NuPlayer:processDeferredActions()
activate NuPlayer
NuPlayer->NuPlayer:FlushDecoderAction::execute()
activate NuPlayer
NuPlayer->NuPlayer:performDecoderFlush()
activate NuPlayer
NuPlayer->NuPlayer:flushDecoder()
activate NuPlayer
NuPlayer->MediaCodec:flush()
deactivate NuPlayer
deactivate NuPlayer
deactivate NuPlayer

activate MediaCodec
MediaCodec->MediaCodec:**kWhatFlush**
activate MediaCodec
MediaCodec->CCodec:signalFlush()
deactivate MediaCodec
deactivate MediaCodec
activate CCodec
CCodec->CCodec:**kWhatFlush**
activate CCodec
CCodec->CCodec:flush()
activate CCodec
CCodec-->Component:flush()

CCodec->CCodecBufferChannel:flush()

CCodec->MediaCodec:**kWhatFlushCompleted**
note right:CodecCallback::onFlushCompleted()\n\
MediaCodec::onMessageReceived(**kWhatCodecNotify**)\n\
**kWhatFlushCompleted**
deactivate CCodec
deactivate CCodec
deactivate CCodec
' activate MediaCodec
' MediaCodec->CCodec:signalResume()
' deactivate MediaCodec


NuPlayer->NuPlayer:SeekAction::execute()
activate NuPlayer
NuPlayer->NuPlayer:performSeek()
activate NuPlayer
<-NuPlayer:mSource->\n\tseekTo()
activate NuPlayer
deactivate NuPlayer
deactivate NuPlayer
deactivate NuPlayer

NuPlayer->NuPlayer:ResumeDecoderAction()
activate NuPlayer
NuPlayer->NuPlayer:performResumeDecoders()
activate NuPlayer
NuPlayer->CCodec:signalResume()
deactivate NuPlayer
deactivate NuPlayer
deactivate NuPlayer
deactivate NuPlayer
deactivate NuPlayer
activate CCodec
CCodec->CCodecBufferChannel:start()
deactivate CCodec


' group DECODEING
C2SoftAacDec->C2SoftAacDec:aac\n\tDecodeFrame()
' C2SoftAacDec->libAACdec:aacDecoder_DecodeFrame()
' activate libAACdec
' libAACdec->
' deactivate libAACdec
activate C2SoftAacDec
note over C2SoftAacDec:**DECODEING...**
deactivate C2SoftAacDec
C2SoftAacDec->C2SoftAacDec:outputDelayRingBuffer\n\tPutSamples()
C2SoftAacDec->C2SoftAacDec:outputDelayRingBuffer\n\tGetSamples()
' group NO_EOS
C2SoftAacDec->C2SoftAacDec:drainRingBuffer()
activate C2SoftAacDec
C2SoftAacDec->C2SoftAacDec:outputDelayRingBuffer\n\tSamplesAvailable()
activate C2SoftAacDec
C2SoftAacDec->C2SoftAacDec:drainRingBuffer()
activate C2SoftAacDec
deactivate C2SoftAacDec
deactivate C2SoftAacDec
deactivate C2SoftAacDec
' end group
C2SoftAacDec->C2SoftAacDec:drainInternal()
activate C2SoftAacDec
C2SoftAacDec->C2SoftAacDec:drainRingBuffer()
activate C2SoftAacDec
deactivate C2SoftAacDec
deactivate C2SoftAacDec
deactivate C2SoftAacDec
' end group

' group queueInputBuffer
MediaCodec->CCodecBufferChannel:queueInputBuffer()
deactivate MediaCodec
deactivate MediaCodec
activate CCodecBufferChannel
CCodecBufferChannel->CCodecBufferChannel:queueInputBufferInternal()
activate CCodecBufferChannel
CCodecBufferChannel-->Component:queue()
deactivate CCodecBufferChannel
deactivate CCodecBufferChannel
Component->C2SoftAacDec:**kWhatProcess**
' end group
note over C2SoftAacDec:**DECODEING...**

C2SoftAacDec-->Component:onWorkDone()
deactivate C2SoftAacDec
deactivate C2SoftAacDec

' group CB_OUTPUT_AVAILABLE
' Component-->HidlListener:onWorkDone()
' HidlListener->ClientListener:onWorkDone()
' ClientListener->CCodec:**kWhatWorkDone**
Component-->CCodec:**kWhatWorkDone**
note right:HidlListener::onWorkDone()\n\
ClientListener::onWorkDone()\n\
CCodec:**kWhatWorkDone**
activate CCodec
CCodec->CCodecBufferChannel:onWorkDone()
deactivate CCodec
activate CCodecBufferChannel
CCodecBufferChannel->CCodecBufferChannel:handleWork()
activate CCodecBufferChannel
CCodecBufferChannel->CCodecBufferChannel:sendOutputBuffers()
activate CCodecBufferChannel
' CCodecBufferChannel->BufferCallback:onOutputBufferAvailable()
CCodecBufferChannel->MediaCodec:**kWhatDrainThisBuffer**
note left:BufferCallback::onOutputBufferAvailable()\n\
MediaCodec:**kWhatDrainThisBuffer**
deactivate CCodecBufferChannel
deactivate CCodecBufferChannel
deactivate CCodecBufferChannel
' BufferCallback->MediaCodec:**kWhatDrainThisBuffer**
activate MediaCodec
MediaCodec->MediaCodec:onOutputBufferAvailable()
activate MediaCodec
MediaCodec->MediaCodec:dequeuePortBuffer()
activate MediaCodec
MediaCodec->Decoder:**CB_OUTPUT_AVAILABLE**
deactivate MediaCodec
deactivate MediaCodec
deactivate MediaCodec
activate Decoder
Decoder->Decoder:handleAnOutputBuffer()
activate Decoder
Decoder->Renderer:queueBuffer()
deactivate Decoder
deactivate Decoder
activate Renderer
' end group
Renderer->Renderer:**kWhatQueueBuffer**
activate Renderer
Renderer->Renderer:onQueueBuffer()
activate Renderer

' group Render Audio
Renderer->Renderer:postDrainVideoQueue()
activate Renderer
Renderer->Renderer:kWhatDrainAudioQueue
activate Renderer
Renderer->Renderer:postDrainAudioQueue_l()
activate Renderer
Renderer->Renderer:**kWhatDrainAudioQueue**
activate Renderer
Renderer->Renderer:onDrainAudioQueue()
activate Renderer
' end group
<-Renderer:AudioOutput::write()
deactivate Renderer
deactivate Renderer
deactivate Renderer
deactivate Renderer
deactivate Renderer

note over Renderer:**A/V SYNC**

' group Render Video
Renderer->Renderer:postDrainVideoQueue()
activate Renderer
Renderer->Renderer:**kWhatDrainVideoQueue**
activate Renderer
Renderer->Renderer:onDrainVideoQueue
activate Renderer
Renderer->Renderer:**kWhatRenderBuffer**
activate Renderer
Renderer->Renderer:onRenderBuffer()
activate Renderer
Renderer->MediaCodec:renderOutputBufferAndRelease()
deactivate Renderer
deactivate Renderer
deactivate Renderer
deactivate Renderer
deactivate Renderer
deactivate Renderer
deactivate Renderer
deactivate Renderer
activate MediaCodec
MediaCodec->MediaCodec:kWhatReleaseOutputBuffer
activate MediaCodec
note over MediaCodec:**...**
' deactivate MediaCodec
' deactivate MediaCodec
' activate MediaCodec
' MediaCodec->MediaCodec:onReleaseOutputBuffer()
' activate MediaCodec
' MediaCodec->CCodecBufferChannel:renderOutputBuffer()
' deactivate MediaCodec
' deactivate MediaCodec
' CCodecBufferChannel-->Component:queueToOutputSurface()



' activate C2SoftAacDec
' C2SoftAacDec->C2SoftAacDec:processQueue()
' activate C2SoftAacDec
' C2SoftAacDec->C2Buffer::~Impl::~Impl
' C2SoftAacDec->C2SoftAacDec:process()
' activate C2SoftAacDec
' C2Buffer->InputBufferManager:_onBufferDestroyed()
' InputBufferManager-->HidlListener:onInputBuffersReleased()
' deactivate InputBufferManager
' deactivate InputBufferManager
' HidlListener->ClientListener:onInputBufferDone()
' ClientListener->CCodec:onInputBufferDone()
' CCodec->CCodecBufferChannel:onInputBufferDone()
' activate CCodecBufferChannel
' CCodecBufferChannel->CCodecBufferChannel:feedInputBufferIfAvailable()
' activate CCodecBufferChannel
' CCodecBufferChannel->CCodecBufferChannel:feedInputBufferIfAvailableInternal()
' activate CCodecBufferChannel
' CCodecBufferChannel->BufferCallback:onInputBufferAvailable()
' deactivate CCodecBufferChannel
' deactivate CCodecBufferChannel
' deactivate CCodecBufferChannel
' BufferCallback->MediaCodec:**kWhatFillThisBuffer**
' activate MediaCodec
' MediaCodec->MediaCodec:onInputBufferAvailable()
' activate MediaCodec
' MediaCodec->MediaCodec:dequeuePortBuffer()
' activate MediaCodec
' MediaCodec->Decoder:**CB_INPUT_AVAILABLE**
' deactivate MediaCodec
' deactivate MediaCodec
' deactivate MediaCodec
' activate Decoder
' Decoder->Decoder:handleAnInputBuffer()
' activate Decoder
' Decoder->Decoder:onRequestInputBuffers()
' note left:**DecoderBase**
' activate Decoder
' Decoder->Decoder:doRequestBuffers()
' note left:**Decoder**
' activate Decoder
' Decoder->Decoder:Decoder::fetchInputData()
' activate Decoder
' Decoder->GenericSource:dequeueAccessUnit()
' deactivate Decoder
' deactivate Decoder
' deactivate Decoder
' deactivate Decoder
' deactivate Decoder

' C2SoftAacDec->C2SoftAacDec:aacDecoder_DecodeFrame()
' C2SoftAacDec->C2SoftAacDec:outputDelayRingBufferPutSamples()
' C2SoftAacDec->C2SoftAacDec:outputDelayRingBufferGetSamples()
' group NO_EOS
' C2SoftAacDec->C2SoftAacDec:drainRingBuffer()
' activate C2SoftAacDec
' C2SoftAacDec->C2SoftAacDec:outputDelayRingBufferSamplesAvailable()
' activate C2SoftAacDec
' C2SoftAacDec->C2SoftAacDec:drainRingBuffer()
' activate C2SoftAacDec
' deactivate C2SoftAacDec
' deactivate C2SoftAacDec
' deactivate C2SoftAacDec
' end group
' C2SoftAacDec->C2SoftAacDec:drainInternal()
' activate C2SoftAacDec
' C2SoftAacDec->C2SoftAacDec:drainRingBuffer()
' activate C2SoftAacDec
' deactivate C2SoftAacDec
' deactivate C2SoftAacDec
' deactivate C2SoftAacDec

' C2SoftAacDec-->Component:onWorkDone()
' deactivate C2SoftAacDec
' deactivate C2SoftAacDec

' Component-->HidlListener:onWorkDone()
' HidlListener->ClientListener:onWorkDone()
' ClientListener->CCodec:**kWhatWorkDone**
' CCodec->CCodecBufferChannel:onWorkDone()
' activate CCodecBufferChannel
' CCodecBufferChannel->CCodecBufferChannel:handleWork()
' activate CCodecBufferChannel
' CCodecBufferChannel->CCodecBufferChannel:sendOutputBuffers()
' activate CCodecBufferChannel
' CCodecBufferChannel->BufferCallback:onOutputBufferAvailable()
' deactivate CCodecBufferChannel
' deactivate CCodecBufferChannel
' deactivate CCodecBufferChannel
' BufferCallback->MediaCodec:**kWhatDrainThisBuffer**
' activate MediaCodec
' MediaCodec->MediaCodec:onOutputBufferAvailable()
' activate MediaCodec
' MediaCodec->MediaCodec:dequeuePortBuffer()
' activate MediaCodec
' MediaCodec->Decoder:CB_OUTPUT_AVAILABLE()
' deactivate MediaCodec
' deactivate MediaCodec
' deactivate MediaCodec
' activate Decoder
' Decoder->Decoder:handleAnOutputBuffer()
' activate Decoder
' Decoder->Decoder:**kWhatRenderBuffer**
' activate Decoder
' Decoder->Decoder:onRenderBuffer()
' activate Decoder
' Decoder->MediaCodec::**kWhatReleaseOutputBuffer**
' deactivate Decoder
' deactivate Decoder
' deactivate Decoder
' deactivate Decoder
' activate MediaCodec
' activate MediaCodec
MediaCodec->MediaCodec:onReleaseOutputBuffer()
activate MediaCodec
MediaCodec->CCodecBufferChannel:renderOutputBuffer()
deactivate MediaCodec
deactivate MediaCodec
deactivate MediaCodec
CCodecBufferChannel-->Component:queueToOutputSurface()
' end group

->MediaCodec:dequeueOutputBuffer()
activate MediaCodec
' group dequeueOutputBuffer
MediaCodec->MediaCodec:**kWhatReleaseOutputBuffer**
activate MediaCodec
MediaCodec->MediaCodec:handleDequeueOutputBuffer()
activate MediaCodec
MediaCodec->MediaCodec:dequeuePortBuffer()
activate MediaCodec
deactivate MediaCodec
deactivate MediaCodec
deactivate MediaCodec
deactivate MediaCodec
' end group

' ->MediaCodec:getOutputBuffer()
' activate MediaCodec
' MediaCodec->MediaCodec:getBufferAndFormat()
' activate MediaCodec
' deactivate MediaCodec
' deactivate MediaCodec

@enduml